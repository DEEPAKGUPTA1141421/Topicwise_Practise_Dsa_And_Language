/******************************************************************************

Welcome to GDB Online.
GDB online is an online compiler and debugger tool for C, C++, Python, Java, PHP, Ruby, Perl,
C#, OCaml, VB, Swift, Pascal, Fortran, Haskell, Objective-C, Assembly, HTML, CSS, JS, SQLite, Prolog.
Code, Compile, Run and Debug online from anywhere in world.

*******************************************************************************/
#include <stdio.h>
#include<stdlib.h>
#include<string.h>
#include<stdint.h>
void *createarray(int size,size_t sizeOfType){
    void*arr1=malloc(size*sizeOfType);
    if(arr1==NULL){
        printf("unsuccesfully");
        return NULL;
    }
    return arr1;
}
void **create2darray(int r,int c,size_t sizeOfType){
    void**arr1=malloc(r*sizeof(void*));
    if(arr1==NULL){
        printf("unsuccesfully");
        arr1;
    }
    for(int i=0;i<c;i++){
        arr1[i]=malloc(c*sizeOfType);
        if(arr1[i]==NULL){
            printf("unsuccesfully in created space ifor coloum");
            return arr1;
        }
    }
    return arr1;
}
void delete2darray(void**arr,int row){
    for(int i=0;i<row;i++){
        free(arr[i]);
    }
    free(arr);
    printf("succesfully deleted array");
}

typedef struct {
    void** array;   // Array to store elements
    int capacity;   // Maximum capacity of the stack
    int size;       // Current size of the stack
}Stack;

// Function to initialize a stack
Stack* createStack(size_t capacity) {
    Stack* stack = (Stack*)malloc(sizeof(Stack));
    stack->capacity = capacity;
    stack->array = (void**)malloc(capacity * sizeof(void*));
    stack->size = 0;
    return stack;
}

// Function to check if the stack is empty
int isEmpty(Stack* stack) {
    return stack->size == 0;
}

// Function to check if the stack is full
int isFull(Stack* stack) {
    return stack->size == stack->capacity;
}

// Function to push an element onto the stack
void push(Stack* stack, void* item) {
    if (isFull(stack)) {
        printf("Stack is full but you are special so i created extra space for you\n");
        return;
    }
    stack->array[stack->size++] = item;
    //printf("successfully added %d\n",(int)stack->array[stack->size-1]);
}

// Function to pop an element from the stack
void* pop(Stack* stack) {
    if (isEmpty(stack)) {
        printf("Stack underflow\n");
        return NULL;
    }
    return stack->array[--stack->size];
}
// Function to get the top element of the stack without popping it
void* peek(Stack* stack) {
    if (isEmpty(stack)) {
        printf("Stack is empty\n");
        return NULL;
    }
    int a=stack->size - 1;
    return stack->array[a];
}

// Function to free the memory allocated for the stack
void destroyStack(Stack* stack) {
    free(stack->array);
    free(stack);
}
function usestack(){
Stack* intStack = createStack(5);
    int a=10;
    void*ptr=&a;
    int c=100;
    void*ptr1=&c;
    push(intStack, ptr);
    push(intStack, ptr1);
    push(intStack, ptr);
    push(intStack, ptr1);
    push(intStack, ptr);
    push(intStack, ptr1);
    // push(intStack, (void*)&2);
    // push(intStack, (void*)&3);

    printf("Top of the stack: %d\n", *(int*)peek(intStack));
    printf("size is %d\n",intStack->size);
    printf("deleted elemnet is %d\n",*(int*)pop(intStack));
    printf("size is %d\n",intStack->size);
    printf("deleted elemnet is %d\n",*(int*)pop(intStack));
    printf("size is %d\n",intStack->size);
    if(peek(intStack)==NULL){
        printf("Can't access element");
    }
    else{
        printf("Top of the stack after pop: %d\n", *(int*)peek(intStack));
    }
    destroyStack(intStack);
}
int main()
{
    int n=3;
    int m=4;
    int**arr1=(int**)create2darray(n,m,sizeof(int));
    for(int i=0;i<n;i++){
        for(int j=0;j<m;j++){
            arr1[i][j]=i;
        }
    }
    for(int i=0;i<n;i++){
        for(int j=0;j<m;j++){
            printf("%d ",arr1[i][j]);
        }
        printf("\n");
    }
    delete2darray((void**)arr1,n);
    
    int*arr1=(int*)createarray(5,sizeof(int));
    for(int i=0;i<5;i++){
        printf("%d\n",arr1[i]);
    }
    free(arr1);
    char*arr=(char*)createarray(5,sizeof(char));
    for(int i=0;i<5;i++){
        arr[i]='a';
    }
    for(int i=0;i<5;i++){
        printf("%c",arr[i]);
    }
    void*arr=malloc(5*sizeof(int));
    
    ll a=10;
    printf("%lld is 10 \n",a);
    int*arr=(int*)malloc(5*sizeof(int));
    int*arr1=(int*)calloc(5,sizeof(int));
    for(int i=0;i<5;i++){
        printf("%d %d\n",arr[i] ,arr1[i]);
    }
    if(arr1!=NULL){
        free(arr1);
        printf("succesfully alloctaed memeory gets free");
    }
    arr=realloc(arr,7*sizeof(int));
    printf("after");
    for(int i=0;i<7;i++){
        printf("%d\n",arr[i]);
    }
    usestack();
    return 0;
}
